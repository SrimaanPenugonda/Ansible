S30:
Problems with shell scripting
shell scripting is  Imperative
Ansible is declarative
    user sample - to add sample - this will check the OS , version all and add the user irrespective of
    user add command
Shell Scripting works on one operating system
    Ansible can work on any operating system - Heterogeneous
Shell scripting is sequential
    Ansible is parallel operations
Shell Script code has to be locally available

Configuration Management Tools
    Puppet,Ansible etc

Ansible -
    Declarative
    Heterogeneous
    Parallel operations
    Not be on the local sever
Ansible is better tool than puppet

Diff B/W Pull and Push
Ansible - push the command to node (push- primary, pull - second)
Chef and puppet - pull mechanism - pull the info from nodes and give commands

INVENTORY-
    List of servers managed by ansible has to provided with file inventory
    LIST OF SERVERS mentioned here- hostnames,ip addresses
    best practice - dev,prod diff inventory files
    inv - inventory file with instance private ip address
    ansible -i inv all -u centos -k -m ansible.builtin.ping - to check the ping to above instance
    this for 2.10 version , below 2.10 version simply give 'ping'
    export ANSIBLE_HOST_KEY_CHECKING=False - error solution

Just for INFO
to install java on shell in that instance
    ansible -i inv all -u centos -k -m ansible.builtin.shell -a "sudo yum install java -y"
ansible.builtin.ping
ansible.builtin.shell - collections in ansible
ansible -i inv all -u centos -m ansible.builtin.shell -a "hostname" -e "ansible_password=DevOps321"
    without asking pwd -> remove -k
KEYS:
    ssh keygen -f devops -> create keypair in devops direc


Ansible PLAYBOOK - YAML Language used
    hosts:all
    tasks:
      name:Print Hello


  ansible -i inv all -u centos --private-key=./devops -m ansible.builtin.ping - added keypair
  in workstation and ping the other node1 instance directly here

S31
Creating Play book
01-print.yml
1.use proper indentation
2.tasks are the list of activities perform one by one
3.debug is called as module until 2.9 now in 2.10 its called as ansible.builtin.debug (collection)
4.name key is optional and benefits only to understand whats gng in command o/p
5.hosts key is mandatory and tasks/roles also mandatory

Variables:
1.vars declared at play level can access by any task in the play
2.one play variable cant be accessed by another play by default
3.Local variables have high precedence than global variables
4.vars_files will have high precedence than global variables
5.local>>vars_files>>global
6.vars_prompt -which will ask for variable in CLI
7. pass variables by -e URL=www.cmd.com -  this will replace all URL variables
8. CLI variables with -e option have high precedence

# Things to explore.
# 1. We can define variables in inventory file also, Explore this option.

Runtime variables :
check the 03-runtime





